name: Main FOODGRAM workflow

on: push

jobs:
  tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13.0-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.12
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8==6.0.0 flake8-isort==6.0.0
          pip install -r ./backend/foodgram/requirements.txt
      - name: Run flake8 and Django tests
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
          DB_HOST: 127.0.0.1
          DB_PORT: 5432
        run: |
          flake8 backend/
          cd backend/foodgram
          python manage.py test

  frontend_tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
      - name: Install dependencies
        run: |
          cd frontend
          npm ci
      - name: Run frontend tests
        run: |
          cd frontend
          npm run test

  build_and_push_to_docker_hub:
    name: Push Django Docker image to DockerHub
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Check out repo
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend/foodgram/
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/foodgram_backend:latest

  build_frontend_and_push_to_docker_hub:
    name: Push frontend Docker image to DockerHub
    runs-on: ubuntu-latest
    needs: frontend_tests
    steps:
      - name: Check out repo
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend/
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/foodgram_frontend:latest

  build_gateway_and_push_to_docker_hub:
    name: Push gateway Docker image to DockerHub
    runs-on: ubuntu-latest
    steps:
      - name: Check out repo
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push gateway image
        uses: docker/build-push-action@v5
        with:
          context: ./infra/
          push: true
          tags: andrievskis1228/foodgram_gateway:latest

  deploy:
    runs-on: ubuntu-latest
    needs:
      - build_and_push_to_docker_hub
      - build_frontend_and_push_to_docker_hub
      - build_gateway_and_push_to_docker_hub
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Copy docker-compose.yml to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          source: "docker-compose.production.yml"
          target: "foodgram"
          known_hosts_enabled: false
          timeout: 30s
          command_timeout: 1m
          proxy_timeout: 1m

      - name: Deploy on server via SSH
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          known_hosts_enabled: false
          script: |
            set -e
            cd /home/${{ secrets.USER }}/foodgram || exit 1
            echo "üîÑ Pulling latest images..."
            sudo docker compose -f docker-compose.production.yml pull
            echo "üõë Stopping containers..."
            sudo docker compose -f docker-compose.production.yml down
            echo "üöÄ Starting containers..."
            sudo docker compose -f docker-compose.production.yml up -d
            echo "‚öôÔ∏è Running migrations..."
            sudo docker compose -f docker-compose.production.yml exec -T backend python manage.py migrate
            echo "üì¶ Collecting static files..."
            sudo docker compose -f docker-compose.production.yml exec -T backend python manage.py collectstatic --noinput
            echo "‚úÖ Deploy completed successfully!"

  send_message:
    runs-on: ubuntu-latest
    needs: deploy
    if: success()
    steps:
      - name: Send success notification to Telegram
        uses: appleboy/telegram-action@v1
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            üéâ –î–µ–ø–ª–æ–π foodgram —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!
            üïí –í—Ä–µ–º—è: $(date '+%Y-%m-%d %H:%M:%S')
