"""
–í—å—é—Å–µ—Ç—ã API: —Ä–µ—Ü–µ–ø—Ç—ã, —Ç–µ–≥–∏, –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏.
"""

from djoser.views import UserViewSet as DjoserUserViewSet
from django.db.models import F, Sum
from django.http import HttpResponse
from django.shortcuts import get_object_or_404
from django_filters.rest_framework import DjangoFilterBackend
from rest_framework import exceptions, filters, status, viewsets
from rest_framework.decorators import action
from rest_framework.parsers import JSONParser, FormParser
from rest_framework.permissions import IsAuthenticated
from rest_framework.response import Response
from rest_framework.views import APIView

from .serializers import (
    IngredientSerializer,
    RecipeCreateUpdateSerializer,
    RecipeSerializer,
    TagSerializer,
    SubscribeSerializer,
    SubscriptionSerializer,
    AvatarSerializer,
    FavoriteSerializer,
    ShoppingCartSerializer,
)
from recipes.filters import RecipeFilter
from .pagination import PageNumberPagination
from recipes.models import (
    Favorite,
    Ingredient,
    Recipe,
    RecipeIngredients,
    ShoppingCart,
    Tag,
)
from recipes.permissions import IsAuthorOrAdminPermission
from users.models import User, Subscription, Profile


class TagViewSet(viewsets.ReadOnlyModelViewSet):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–≥–æ–≤."""

    queryset = Tag.objects.all()
    serializer_class = TagSerializer


class IngredientViewSet(viewsets.ReadOnlyModelViewSet):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤."""

    queryset = Ingredient.objects.all()
    serializer_class = IngredientSerializer
    filter_backends = (filters.SearchFilter,)
    search_fields = ("^name",)


class RecipeViewSet(viewsets.ModelViewSet):
    """–í—å—é—Å–µ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞–º–∏: —Å–æ–∑–¥–∞–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, —Ñ–∏–ª—å—Ç—Ä."""

    queryset = Recipe.objects.all()
    permission_classes = (IsAuthorOrAdminPermission,)
    filter_backends = (DjangoFilterBackend,)
    filterset_class = RecipeFilter
    pagination_class = PageNumberPagination

    def get_serializer_class(self):
        if self.action in ("create", "partial_update"):
            return RecipeCreateUpdateSerializer
        return RecipeSerializer

    def _create_relation(self, request, recipe, model, serializer_class):
        """–°–æ–∑–¥–∞—ë—Ç —Å–≤—è–∑—å (–∏–∑–±—Ä–∞–Ω–Ω–æ–µ / –∫–æ—Ä–∑–∏–Ω–∞)."""
        serializer = serializer_class(
            data={"user": request.user.id, "recipe": recipe.id},
            context={"request": request},
        )
        serializer.is_valid(raise_exception=True)
        serializer.save()
        return Response(serializer.data, status=status.HTTP_201_CREATED)

    @staticmethod
    def _delete_relation(user, recipe, model):
        """–£–¥–∞–ª—è–µ—Ç —Å–≤—è–∑—å. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç 204 –∏–ª–∏ 400, –µ—Å–ª–∏ —Å–≤—è–∑–∏ –Ω–µ –±—ã–ª–æ."""
        deleted, _ = model.objects.filter(user=user, recipe=recipe).delete()
        if not deleted:
            raise exceptions.ValidationError("–†–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ.")
        return Response(status=status.HTTP_204_NO_CONTENT)

    @action(
        detail=True, methods=["post"], permission_classes=(IsAuthenticated,)
    )
    def favorite(self, request, pk=None):
        """–î–æ–±–∞–≤–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ."""
        recipe = get_object_or_404(Recipe, pk=pk)
        return self._create_relation(
            request, recipe, Favorite, FavoriteSerializer
        )

    @favorite.mapping.delete
    def delete_favorite(self, request, pk=None):
        """–£–¥–∞–ª–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ."""
        user = request.user
        recipe = get_object_or_404(Recipe, pk=pk)
        return self._delete_relation(user, recipe, Favorite)

    @action(
        detail=True, methods=["post"], permission_classes=(IsAuthenticated,)
    )
    def shopping_cart(self, request, pk=None):
        """–î–æ–±–∞–≤–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫."""
        recipe = get_object_or_404(Recipe, pk=pk)
        return self._create_relation(
            request, recipe, ShoppingCart, ShoppingCartSerializer
        )

    @shopping_cart.mapping.delete
    def delete_shopping_cart(self, request, pk=None):
        """–£–¥–∞–ª–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫."""
        user = request.user
        recipe = get_object_or_404(Recipe, pk=pk)
        return self._delete_relation(user, recipe, ShoppingCart)

    @action(detail=False, methods="get", permission_classes=(IsAuthenticated,))
    def download_shopping_cart(self, request):
        """–°–∫–∞—á–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ .txt."""
        # –ü–æ–ª—É—á–∞–µ–º ID —Ä–µ—Ü–µ–ø—Ç–æ–≤ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        recipe_ids = request.user.shopping_cart.values_list(
            "recipe_id", flat=True
        )

        # –ï—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞
        if not recipe_ids:
            return HttpResponse(
                "–í–∞—à —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ —Ä–µ—Ü–µ–ø—Ç—ã.",
                content_type="text/plain; charset=utf-8",
                status=400,
            )

        # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
        ingredients = (
            RecipeIngredients.objects.filter(recipe__in=recipe_ids)
            .values(
                name=F("ingredient__name"),
                measurement_unit=F("ingredient__measurement_unit"),
            )
            .annotate(amount=Sum("amount"))
            .order_by("name")
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        buy_list_text = "–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ —Å —Å–∞–π—Ç–∞ Foodgram:\n\n"
        buy_list_text += "\n".join(
            f"{item['name']} ‚Äî {item['amount']} {item['measurement_unit']}"
            for item in ingredients
        )
        buy_list_text += "\n\n–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ Foodgram üç≤"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        response = HttpResponse(
            buy_list_text, content_type="text/plain; charset=utf-8"
        )
        response["Content-Disposition"] = (
            'attachment; filename="shopping-list.txt"'
        )
        return response


class UserViewSet(DjoserUserViewSet):
    """
    –ö–∞—Å—Ç–æ–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π UserViewSet —Å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –ø–æ–¥–ø–∏—Å–æ–∫.
    –ù–∞—Å–ª–µ–¥—É–µ—Ç –≤—Å—ë –æ—Ç Djoser: —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è, /me/, –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.
    –î–æ–±–∞–≤–ª–µ–Ω—ã: /users/subscriptions/, /users/{id}/subscribe/.
    """

    @action(
        detail=False,
        methods=["get"],
        serializer_class=SubscriptionSerializer,
    )
    def subscriptions(self, request):
        """–°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–¥–ø–∏—Å–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å."""
        user = request.user
        authors_ids = user.subscriptions.values_list("author_id", flat=True)
        queryset = User.objects.filter(id__in=authors_ids)
        page = self.paginate_queryset(queryset)
        serializer = self.get_serializer(page, many=True)
        return self.get_paginated_response(serializer.data)

    @action(
        detail=True,
        methods=["post"],
        permission_classes=[IsAuthenticated],
        # –£–±—Ä–∞–ª–∏ serializer_class ‚Äî –±—É–¥–µ–º –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –≤—Ä—É—á–Ω—É—é
    )
    def subscribe(self, request, id=None):
        """–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∞–≤—Ç–æ—Ä–∞."""
        author = get_object_or_404(User, id=id)
        serializer = SubscribeSerializer(
            data={"author": author.id}, context={"request": request}
        )
        serializer.is_valid(raise_exception=True)
        serializer.save()
        return Response(serializer.data, status=status.HTTP_201_CREATED)

    @subscribe.mapping.delete
    def unsubscribe(self, request, id=None):
        """–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –∞–≤—Ç–æ—Ä–∞."""
        author = get_object_or_404(User, id=id)
        subscription = get_object_or_404(
            Subscription, user=request.user, author=author
        )
        subscription.delete()
        return Response(status=status.HTTP_204_NO_CONTENT)


class UserAvatarView(APIView):
    """API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""

    permission_classes = (IsAuthenticated,)
    parser_classes = [JSONParser, FormParser]

    def put(self, request):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –∞–≤–∞—Ç–∞—Ä."""
        user = request.user
        profile, created = Profile.objects.get_or_create(user=user)
        serializer = AvatarSerializer(profile, data=request.data, partial=True)
        serializer.is_valid(raise_exception=True)
        serializer.save()
        avatar_url = request.build_absolute_uri(profile.avatar.url)
        return Response({"avatar": avatar_url}, status=status.HTTP_200_OK)

    def delete(self, request):
        """–£–¥–∞–ª–∏—Ç—å –∞–≤–∞—Ç–∞—Ä."""
        try:
            profile = Profile.objects.get(user=request.user)
        except Profile.DoesNotExist:
            return Response(status=status.HTTP_404_NOT_FOUND)
        if profile.avatar:
            profile.avatar.delete(save=True)
            profile.avatar = None
            profile.save()
        return Response(status=status.HTTP_204_NO_CONTENT)
